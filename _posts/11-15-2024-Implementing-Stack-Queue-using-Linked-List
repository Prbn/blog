# Implementing Stack and Queue using Linked List

Linked lists are versatile data structures that can be used to implement both stacks and queues. In this blog post, we'll explore how to use linked lists to create these two fundamental data structures.

## Stack
A stack follows the Last In, First Out (LIFO) principle. You can use a linked list to implement a stack by performing the following operations:
1. **Push**: Add a new node at the beginning of the linked list.
2. **Pop**: Remove the node from the beginning of the linked list.

Here's a simple example in Python:

```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Stack:
    def __init__(self):
        self.head = None

    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def pop(self):
        if self.head is None:
            return None
        popped_node = self.head
        self.head = self.head.next
        return popped_node.data
```

## Queue
A queue follows the First In, First Out (FIFO) principle. You can use a linked list to implement a queue by performing the following operations:
1. **Enqueue**: Add a new node at the end of the linked list.
2. **Dequeue**: Remove the node from the beginning of the linked list.

Here's a simple example in Python:

```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Queue:
    def __init__(self):
        self.front = None
        self.rear = None

    def enqueue(self, data):
        new_node = Node(data)
        if self.rear is None:
            self.front = self.rear = new_node
            return
        self.rear.next = new_node
        self.rear = new_node

    def dequeue(self):
        if self.front is None:
            return None
        dequeued_node = self.front
        self.front = self.front.next
        if self.front is None:
            self.rear = None
        return dequeued_node.data
```

## Doubly Linked List

A doubly linked list is a linked list where each node contains a reference to both the next and the previous node.

```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node
        new_node.prev = last

    def print_list(self):
        node = self.head
        while node:
            print(node.data, end=' ')
            node = node.next

# Example usage
dll = DoublyLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
dll.print_list()  # Output: 1 2 3

```
